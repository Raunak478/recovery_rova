#!/sbin/sh

# ***************************************
# ******** FBE Encryption Toggler *******
# ***************************************
# ** Version: v1.2 ** Date: 18/08/2022 **
# ***************************************
# *********** (c) 2022 iusmac ***********
# ***************************************

main() {
    local action="$1"
    local fde_regex='(encryptable|forceencrypt)=footer'
    local fbe_regex='fileencryption=[^,]+(,?)'
    local fbe_to_fde="/\/data/ s/$fbe_regex/encryptable=footer\1/g"
    # NOTE: usage of "encryptable=" flag causes bootloop on Android 13+
    # (SDK 33+) since FDE support is completely removed there, thus we
    # need to get rid of it to leave the ROM unencrypted.
    local fbe_off_A13_regex="/\/data/ s/(,?)$fbe_regex/\2/g"
    local fstab_file='/vendor/etc/fstab.qcom'
    local GREP=$(find_grep)
    local SED=$(find_sed)

    isFbeDisabled() {
        if isAndroid13OrLater; then
           ! $GREP -E -q "$fbe_regex" $fstab_file
        else
            $GREP -E -q "$fde_regex" $fstab_file && ! $GREP -E -q "$fbe_regex" $fstab_file
        fi
    }

    isFbeEnabled() {
        if isAndroid13OrLater; then
            $GREP -E -q "$fbe_regex" $fstab_file
        else
            ! $GREP -E -q "$fde_regex" $fstab_file && $GREP -E -q "$fbe_regex" $fstab_file
        fi
    }

    disableFBE() {
        log 'Disabling FBE encryption ...'

        local fbe_off_regex="$fbe_to_fde"
        if isAndroid13OrLater; then
            fbe_off_regex="$fbe_off_A13_regex"
        fi

        if isFbeDisabled; then
            log 'FBE has already been disabled!'
            return 1
        elif [ -z "$($SED -E -i -e "$fbe_off_regex w /dev/stdout" $fstab_file)" ]; then
            log 'Failed to disable FBE due to malformed fstab file!'
            return 1
        fi

        return 0
    }

    enableFBE() {
        if [ "$sdk" -gt 0 ] && [ "$sdk" -lt 24 ]; then
            log 'You need an Android 7+ based ROM to get FBE support. Aborting.'
            return 1
        fi

        if [ "$sdk" -lt 29 ]; then
            log 'NOTE: not all ROMs have working FBE. In case of a bootloop, disable FBE or Format Data'
        fi
        log 'Enabling FBE encryption ...'

        local fbe_str='fileencryption=aes-256-xts:aes-256-cts'
        # Android 11 introduces 3rd argument (fileencryption=::[flags]), so
        # let's explicitly set it to be compatible across recoveries
        if [ "$sdk" -ge 30 ]; then
            fbe_str="${fbe_str}:v1"
        fi

        if isFbeEnabled; then
            log 'FBE has already been enabled!'
            return 1
        fi

        local fbe_on_regex="/\/data/ s/$fde_regex/$fbe_str/g"
        if isAndroid13OrLater; then
            # Append fileencryption flag to the end
            fbe_on_regex="/\/data/ s/$/,$fbe_str/g"
        fi

        if [ -z "$($SED -E -i -e "$fbe_on_regex w /dev/stdout" $fstab_file)" ]; then
            log 'Failed to enable FBE due to malformed fstab file!'
            return 1
        fi

        return 0
    }

    disableFBEIfEnabled() {
        if ! isFbeEnabled; then
            log 'FBE is not enabled. Skipping.'
            return 0
        fi

        disableFBE

        return 0
    }

    printFBEState() {
        log 'Detecting FBE state ...'
        if isFbeEnabled; then
            log 'FBE is enabled.'
            echo -n 1
        else
            log 'FBE is not enabled.'
            echo -n 0
        fi

        return 0
    }

    syncFstabCryptoFlagWithDataEncryption() {
        log 'Mounting data ...'
        mount_part /data

        log 'Detecting /data encryption type ...'
        if [ -f '/data/unencrypted/key/version' ]; then
            log '/data partition is FBE. Trying enabling FBE ...'

            if isFbeEnabled; then
                log 'FBE has already been enabled. Skipping.'
                return 0
            fi

            enableFBE
            return $?
        elif cat /proc/mounts | grep /data | grep -q dm- || [ -d /data/media ]; then
            log '/data partition is FDE (or it may be in the future). Disabling FBE if ROM has enabled it ...'
            disableFBEIfEnabled
            return $?
        else
            log 'Unable to detect /data encryption type. Skipping.'
            return 0
        fi
    }

    if [ "$action" != '0' ] &&
        [ "$action" != '1' ] &&
        [ "$action" != '2' ] &&
        [ "$action" != '3' ] &&
        [ "$action" != '4' ]; then
        log "Invalid action: $action"
        return 1
    fi

    if [ "$action" = '3' ]; then
        DISPLAY_LOG=0
    fi

    log 'Starting ...'

    log 'Mounting vendor ...'
    mount_part /vendor

    if [ ! -s "$fstab_file" ]; then
        log "Unable to locate file: $fstab_file"
        log 'Unmounting vendor ...'
        umount_part /vendor
        exit 1
    fi

    log 'Mounting system ...'
    mount_part /system_root

    log 'Retrieving SDK version ...'
    local sdk; sdk="$(getSdk)"
    if [ -z "$sdk" ]; then
        log 'Unable to retrieve SDK version.'
        log 'Unmounting system ...'
        umount_part /system_root
        exit 1
    fi

    local code=0
    case "$action" in
        0) disableFBE; code=$?;;
        1) enableFBE; code=$?;;
        2) disableFBEIfEnabled; code=$?;;
        3) printFBEState; code=$?;;
        4) syncFstabCryptoFlagWithDataEncryption; code=$?
    esac

    log 'Unmounting vendor ...'
    umount_part /vendor

    log 'Unmounting system ...'
    umount_part /system_root

    if [ $code -eq 0 ]; then
        log 'Done!'
    fi
    exit $code
}

# log "<message>" ["<message 2>" ...]
log() {
    local logf=/tmp/FBEtoggler.log
    until [ ! "$1" ]; do
        if [ $DISPLAY_LOG -eq 1 ]; then
            echo -e "FBEToggler: $1" | tee -a $logf
        else
            echo -e "FBEToggler: $1" >> $logf
        fi

        shift
    done
}

# is_mounted <partition>
is_mounted() {
    case `mount` in
        *" $1 "*) echo 1;;
        *) echo 0;;
    esac;
}

# mount_part <partition>
mount_part() {
    if [ -z "$1" ]; then
        return
    fi

    local F=$(is_mounted "$1")
    if [ "$F" = "1" ]; then
        umount_part "$1"
    fi

    mount -w $1
}

# umount_part <partition>
umount_part() {
    if [ -z "$1" ]; then
        return
    fi

    local F=$(is_mounted "$1")
    if [ "$F" = "1" ]; then
        umount "$1" > /dev/null 2>&1
    fi
}

# abort [<message>]
abort() {
    log "$*"
    exit 1
}

# avoid the standalone BSD grep, which segfaults on "grep -w"
find_grep() {
    local GREP=$(which grep)
    local F=/prop.default

    if [ ! -e $F ]; then
        F=/default.prop
        [ ! -e $F ] && F=/tmp/recovery.log
    fi

    if [ ! -L $GREP ]; then
        GREP=""
        if [ -x $BUSYBOX ]; then
            GREP="$BUSYBOX grep"
            $GREP -q build $F > /dev/null 2>&1 || GREP=""
        fi

        if [ -z "$GREP" -a -x $TOYBOX ]; then
            GREP="$TOYBOX grep"
            $GREP -q build $F > /dev/null 2>&1 || GREP=""
        fi

        [ -z "$GREP" ] && GREP=/system/bin/grep
    fi

    echo "$GREP"
}

find_sed() {
    local SED=$(which sed)

    if [ ! -L $SED ]; then
        SED="$TOYBOX sed"
    fi

    echo "$SED"
}

getSdk() {
    for file in /system_root/system/build.prop /system_root/build.prop; do
        if [ -s "$file" ]; then
            sed -E -n '/ro.(system.)?build.version.sdk=/ { s/[^0-9]+//p;q }' $file
            return 0
        fi
    done

    log "Unable to locate file: $file"
    return 1
}

isAndroid13OrLater() {
    [ "$sdk" -ge 33 ]
}

DISPLAY_LOG=1
BUSYBOX=$(which busybox)
if [ -z "$BUSYBOX" ]; then
   BUSYBOX=/system/bin/busybox
   [ ! -e "$BUSYBOX" ] && BUSYBOX=/sbin/busybox
fi

TOYBOX=$(which toybox)
if [ -z "$TOYBOX" ]; then
   TOYBOX=/system/bin/toybox
   [ ! -e "$TOYBOX" ] && TOYBOX=/sbin/toybox
fi

main "$1"
